import 'package:flutter/material.dart';
import 'package:habitgo/models/achievement.dart';
import 'package:habitgo/models/habit.dart';
import 'package:habitgo/models/user.dart';
import 'package:habitgo/providers/user_provider.dart';
import 'package:habitgo/providers/habit_provider.dart';

class AchievementProvider extends ChangeNotifier {
  final UserProvider _userProvider;
  final HabitProvider _habitProvider;

  AchievementProvider(this._userProvider, this._habitProvider);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏
  void checkHabitCompletionAchievements(Habit habit) {
    final user = _userProvider.user;
    if (user == null) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–µ–∫ —Ä–∞–∑–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    final duration = habit.duration;
    if (duration == 7 && !user.isAchievementUnlocked('habit_7_days')) {
      user.unlockAchievement('habit_7_days');
      _showAchievementNotification('–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏');
    }
    if (duration == 14 && !user.isAchievementUnlocked('habit_14_days')) {
      user.unlockAchievement('habit_14_days');
      _showAchievementNotification('–ù–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å');
    }
    if (duration == 21 && !user.isAchievementUnlocked('habit_21_days')) {
      user.unlockAchievement('habit_21_days');
      _showAchievementNotification('–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏');
    }
    if (duration == 30 && !user.isAchievementUnlocked('habit_30_days')) {
      user.unlockAchievement('habit_30_days');
      _showAchievementNotification('–ú–µ—Å—è—Ü —É—Å–ø–µ—Ö–∞');
    }
    if (duration == 60 && !user.isAchievementUnlocked('habit_60_days')) {
      user.unlockAchievement('habit_60_days');
      _showAchievementNotification('–î–≤–∞ –º–µ—Å—è—Ü–∞ —Å–∏–ª—ã');
    }
    if (duration == 100 && !user.isAchievementUnlocked('habit_100_days')) {
      user.unlockAchievement('habit_100_days');
      _showAchievementNotification('–°—Ç–æ–¥–Ω–µ–≤–∫–∞');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç"
    if (!user.isAchievementUnlocked('speed_runner')) {
      final createdDate = habit.createdAt;
      final firstCompletionDate = habit.completedDates.isNotEmpty 
          ? habit.completedDates.first 
          : null;
      
      if (firstCompletionDate != null && 
          firstCompletionDate.difference(createdDate).inDays == 0) {
        user.unlockAchievement('speed_runner');
        _showAchievementNotification('–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç');
      }
    }

    _userProvider.saveUser();
    notifyListeners();
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∑–∞ —Å–µ—Ä–∏—é –¥–Ω–µ–π
  void checkStreakAchievements() {
    final user = _userProvider.user;
    if (user == null) return;

    final streakDays = user.streakDays;
    
    if (streakDays >= 7 && !user.isAchievementUnlocked('streak_7_days')) {
      user.unlockAchievement('streak_7_days');
      _showAchievementNotification('–ù–µ–¥–µ–ª—è –ø–æ–¥—Ä—è–¥');
    }
    if (streakDays >= 30 && !user.isAchievementUnlocked('streak_30_days')) {
      user.unlockAchievement('streak_30_days');
      _showAchievementNotification('–ú–µ—Å—è—Ü –ø–æ–¥—Ä—è–¥');
    }
    if (streakDays >= 100 && !user.isAchievementUnlocked('streak_100_days')) {
      user.unlockAchievement('streak_100_days');
      _showAchievementNotification('–°—Ç–æ–¥–Ω–µ–≤–Ω–∞—è —Å–µ—Ä–∏—è');
    }

    _userProvider.saveUser();
    notifyListeners();
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≤—ã—á–µ–∫
  void checkTotalHabitsAchievements() {
    final user = _userProvider.user;
    if (user == null) return;

    final totalHabits = _habitProvider.habits.length;
    
    if (totalHabits >= 5 && !user.isAchievementUnlocked('total_habits_5')) {
      user.unlockAchievement('total_habits_5');
      _showAchievementNotification('–ú—É–ª—å—Ç–∏–∑–∞–¥–∞—á–Ω–æ—Å—Ç—å');
    }
    if (totalHabits >= 10 && !user.isAchievementUnlocked('total_habits_10')) {
      user.unlockAchievement('total_habits_10');
      _showAchievementNotification('–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä');
    }
    if (totalHabits >= 20 && !user.isAchievementUnlocked('total_habits_20')) {
      user.unlockAchievement('total_habits_20');
      _showAchievementNotification('–ú–∞—Å—Ç–µ—Ä –ø—Ä–∏–≤—ã—á–µ–∫');
    }

    _userProvider.saveUser();
    notifyListeners();
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∑–∞ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  void checkTimeBasedAchievements(Habit habit, DateTime completionTime) {
    final user = _userProvider.user;
    if (user == null) return;

    final hour = completionTime.hour;
    
    // –†–∞–Ω–Ω—è—è –ø—Ç–∞—à–∫–∞ (–¥–æ 8:00)
    if (hour < 8 && !user.isAchievementUnlocked('early_bird')) {
      user.unlockAchievement('early_bird');
      _showAchievementNotification('–†–∞–Ω–Ω—è—è –ø—Ç–∞—à–∫–∞');
    }
    
    // –ù–æ—á–Ω–∞—è —Å–æ–≤–∞ (–ø–æ—Å–ª–µ 22:00)
    if (hour >= 22 && !user.isAchievementUnlocked('night_owl')) {
      user.unlockAchievement('night_owl');
      _showAchievementNotification('–ù–æ—á–Ω–∞—è —Å–æ–≤–∞');
    }

    _userProvider.saveUser();
    notifyListeners();
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∑–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ
  void checkWeekendAchievements() {
    final user = _userProvider.user;
    if (user == null) return;

    final now = DateTime.now();
    final weekday = now.weekday; // 1 = Monday, 7 = Sunday
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤—ã—Ö–æ–¥–Ω—ã–µ (—Å—É–±–±–æ—Ç–∞ –∏–ª–∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
    if ((weekday == 6 || weekday == 7) && !user.isAchievementUnlocked('weekend_warrior')) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —Å–µ–≥–æ–¥–Ω—è
      final activeHabits = _habitProvider.habits.where((h) => !h.isCompleted).toList();
      final today = DateTime.now();
      final todayString = '${today.year}-${today.month.toString().padLeft(2, '0')}-${today.day.toString().padLeft(2, '0')}';
      
      final allCompleted = activeHabits.every((habit) => 
          habit.completedDates.contains(todayString));
      
      if (allCompleted && activeHabits.isNotEmpty) {
        user.unlockAchievement('weekend_warrior');
        _showAchievementNotification('–í–æ–∏–Ω –≤—ã—Ö–æ–¥–Ω—ã—Ö');
        _userProvider.saveUser();
        notifyListeners();
      }
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∑–∞ –∏–¥–µ–∞–ª—å–Ω—É—é –Ω–µ–¥–µ–ª—é
  void checkPerfectWeekAchievements() {
    final user = _userProvider.user;
    if (user == null) return;

    final now = DateTime.now();
    final weekStart = now.subtract(Duration(days: now.weekday - 1));
    final weekEnd = weekStart.add(const Duration(days: 6));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é
    final activeHabits = _habitProvider.habits.where((h) => !h.isCompleted).toList();
    bool perfectWeek = true;
    
    for (final habit in activeHabits) {
      final weekDates = <String>[];
      for (int i = 0; i < 7; i++) {
        final date = weekStart.add(Duration(days: i));
        weekDates.add('${date.year}-${date.month.toString().padLeft(2, '0')}-${date.day.toString().padLeft(2, '0')}');
      }
      
      final completedThisWeek = weekDates.any((date) => habit.completedDates.contains(date));
      if (!completedThisWeek) {
        perfectWeek = false;
        break;
      }
    }
    
    if (perfectWeek && activeHabits.isNotEmpty && !user.isAchievementUnlocked('perfect_week_1')) {
      user.unlockAchievement('perfect_week_1');
      _showAchievementNotification('–ò–¥–µ–∞–ª—å–Ω–∞—è –Ω–µ–¥–µ–ª—è');
      _userProvider.saveUser();
      notifyListeners();
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∑–∞ –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ
  void checkConsistencyAchievements() {
    final user = _userProvider.user;
    if (user == null) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
    final now = DateTime.now();
    final monthStart = DateTime(now.year, now.month - 1, 1);
    final monthEnd = DateTime(now.year, now.month, 0);
    
    final activeHabits = _habitProvider.habits.where((h) => !h.isCompleted).toList();
    if (activeHabits.isEmpty) return;
    
    double totalAccuracy = 0;
    int habitCount = 0;
    
    for (final habit in activeHabits) {
      final monthDates = <String>[];
      for (int i = 0; i < monthEnd.day; i++) {
        final date = monthStart.add(Duration(days: i));
        monthDates.add('${date.year}-${date.month.toString().padLeft(2, '0')}-${date.day.toString().padLeft(2, '0')}');
      }
      
      final completedThisMonth = monthDates.where((date) => habit.completedDates.contains(date)).length;
      final accuracy = monthDates.isNotEmpty ? (completedThisMonth / monthDates.length) * 100 : 0;
      
      totalAccuracy += accuracy;
      habitCount++;
    }
    
    final averageAccuracy = habitCount > 0 ? totalAccuracy / habitCount : 0;
    
    if (averageAccuracy >= 90 && !user.isAchievementUnlocked('consistency_king')) {
      user.unlockAchievement('consistency_king');
      _showAchievementNotification('–ö–æ—Ä–æ–ª—å –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–∞');
      _userProvider.saveUser();
      notifyListeners();
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
  void _showAchievementNotification(String achievementTitle) {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å flutter_local_notifications –∏–ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å SnackBar
    debugPrint('üéâ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: $achievementTitle');
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  void checkAllAchievements() {
    checkStreakAchievements();
    checkTotalHabitsAchievements();
    checkWeekendAchievements();
    checkPerfectWeekAchievements();
    checkConsistencyAchievements();
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  double getAchievementProgress(String achievementId) {
    final user = _userProvider.user;
    if (user == null) return 0.0;

    final achievement = user.getAllAchievements().firstWhere(
      (a) => a.id == achievementId,
      orElse: () => throw Exception('Achievement not found: $achievementId'),
    );

    if (achievement.isUnlocked) return 1.0;

    switch (achievement.type) {
      case AchievementType.habitCompletion:
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–∏–≤—ã—á–∫–∏ —Å —Ç–∞–∫–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
        final habitsWithDuration = _habitProvider.habits
            .where((h) => h.duration == achievement.requirement && h.isCompleted)
            .length;
        return habitsWithDuration > 0 ? 1.0 : 0.0;
        
      case AchievementType.streakDays:
        final currentStreak = user.streakDays;
        return (currentStreak / achievement.requirement).clamp(0.0, 1.0);
        
      case AchievementType.totalHabits:
        final totalHabits = _habitProvider.habits.length;
        return (totalHabits / achievement.requirement).clamp(0.0, 1.0);
        
      case AchievementType.perfectWeek:
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø—Ä–æ–≥—Ä–µ—Å—Å 0, –µ—Å–ª–∏ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ
        return 0.0;
        
      case AchievementType.earlyBird:
      case AchievementType.nightOwl:
      case AchievementType.weekendWarrior:
      case AchievementType.consistencyKing:
      case AchievementType.speedRunner:
        // –≠—Ç–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ª–∏–±–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã, –ª–∏–±–æ –Ω–µ—Ç
        return 0.0;
        
      default:
        return 0.0;
    }
  }
} 